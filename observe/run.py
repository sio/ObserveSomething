"""
Main executable module of ObserveSomething
"""


import logging
import os.path
from configparser import ConfigParser
from datetime import datetime
from time import sleep
from tempfile import TemporaryDirectory
from toolpot.python import log
from toolpot.python.context import suppress_and_log
from toolpot.python.input import parse_time
from toolpot.windows.com import MailItem
from .auto import select_windows, take_screenshot


DEFAULT_CONFIGURATION = {
    "observe": {
        "delay": "30m",
        "send_keys": "{F5}",
        "typing_delay": "1s",
        "image_dir": "",
    },
    "report": {
        "to": "",
        "subject": "New screenshots from ObserveSomething",
        "body": "This report was generated by ObserveSomething",
    },
}



def prepare(window, keys, delay):
    """
    Prepare window for taking screenshot: maximize, focus, refresh information

    Arguments
    window
        Pywinauto window specification
    keys
        String with keys to be sent to trigger information refresh
    delay
        Delay in seconds between keypresses
    """
    window.minimize()
    window.maximize()
    window.set_focus()
    sleep(delay)  # some apps are not responsive at the moment of maximizing
    window.type_keys(keys, pause=delay)
    sleep(delay)


def main(config_path):
    """Command line interface for ObserveSomething"""
    SCREENSHOT_NAME = "{date}_win{window_id}_scr{job_id}.png"
    DATE_FORMAT = "%Y%m%d"

    # Load configuration
    config = ConfigParser()
    config.read_dict(DEFAULT_CONFIGURATION)
    config.read(config_path, encoding="utf-8")

    # Enable logging
    log.setup(__name__.split(".")[0],
              filename=os.path.splitext(config_path)[0] + ".log")
    logger = logging.getLogger(__name__)
    logger.debug("Configured logging for {}".format(__name__))

    # Set up the environment for worker
    delay = parse_time(config["observe"]["delay"]).total_seconds()
    key_delay = parse_time(config["observe"]["typing_delay"]).total_seconds()

    address_line = config["report"]["to"]
    while not address_line.strip():
        message = [
            "Recipient addresses not found in {}".upper().format(config_path),
            "Please enter space separated email addresses:\n"
            ]
        address_line = input("\n".join(message))
    addresses = address_line.split()

    image_directory = config["observe"]["image_dir"]
    temp = None
    if not image_directory:
        temp = TemporaryDirectory(prefix="ObserveSomething-")
        image_directory = temp.name
    image_name = os.path.join(image_directory, SCREENSHOT_NAME)
    date = datetime.now().strftime(DATE_FORMAT)

    # Main worker loop
    windows = select_windows()
    logger.debug("Start observing {!r}".format(windows))
    iter_num = 0
    while True:
        iter_num += 1
        logger.debug("Job #{} started".format(iter_num))
        images = list()
        for number, window in enumerate(windows, 1):
            prepare_success = False
            with suppress_and_log(Exception, logger=logger):
                prepare(window.specification,
                        keys=config["observe"]["send_keys"],
                        delay=key_delay)
                prepare_success = True

            if not prepare_success:  # try to dismiss popup/dialog with Esc
                with suppress_and_log(Exception, logger=logger):
                    window.specification.type_keys("{ESC}")
                    sleep(key_delay)
                    prepare(window.specification,
                            keys=config["observe"]["send_keys"],
                            delay=key_delay)
            logger.debug("{window} ready: {status}".format(
                                    window=window,
                                    status=prepare_success))

            image = image_name.format(date=date,
                                      window_id=number,
                                      job_id=iter_num)
            screenshot_success = False
            with suppress_and_log(Exception, logger=logger):
                take_screenshot(image)
                screenshot_success = True
            if screenshot_success: images.append(image)
            logger.debug(
                "screenshot status: {}, path: {}".format(screenshot_success, image))

        # Send all screenshots
        with suppress_and_log(Exception, logger=logger):
            mail = MailItem(recipients=addresses,
                            subject=config["report"]["subject"],
                            body=config["report"]["body"],
                            attachments=images)
            mail.Send()

        # Show progress in terminal
        info = "\n".join([
            "\rJob #{} done, next job scheduled...".format(iter_num),
            "Press Ctrl+C to exit"])
        print(info, end="")
        logger.debug("Job #{} finished".format(iter_num))
        try:
            sleep(delay)
        except KeyboardInterrupt:
            print()
            break
    if temp: temp.cleanup()
